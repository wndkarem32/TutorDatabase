mod systems;
mod comms;
use systems::{Tutorctl, Tutor, Matkul, Error_Type, Tipe_Sesi, str_tomatkul_vec};
use comms::setprompt;
use std::process;
use std::io;
enum Operation {OPS_NOOP, OPS_ADD_TUTOR, OPS_ADD_JADWAL, OPS_DEL_TUTOR, OPS_DEL_JADWAL, OPS_SHOW_JADWAL, OPS_PILIH_TABEL}
addtutor:nametutor=wandi-ka&matkul=fisika
fn main() -> io::Result<()> {
	/*
		let mut typerror : Error_Type = Error_Type::ERR_SUCCESS;
		let mut list_of_tutor = std::vec::Vec::<Tutor>::new();
		let mut mytutor = match Tutor::new("Wandi K", [Matkul::MATKUL_FISIKA, Matkul::MATKUL_KIMIA].to_vec())
		{
			Ok(mytutor) => mytutor,
			Err(_) => process::exit(255),
		};
		let jadwal_id1 = match mytutor.ins_jadwal(Matkul::MATKUL_KIMIA, Tipe_Sesi::SESI_PRIVAT, "12-2-2023 12:00:00") 
		{
			 Ok(id) => id,
			 Err(erx) => panic!("{}", tipe_error(&erx)),
		};
		let jadwal_id2 = match mytutor.ins_jadwal(Matkul::MATKUL_KIMIA, Tipe_Sesi::SESI_PRIVAT, "12-2-2024 12:00:00") 
		{
			 Ok(id) => id,
			 Err(erx) => panic!("{}", tipe_error(&erx)),
		};
		println!("{}", tipe_error(&mytutor.selesai_jadwal(jadwal_id1)));
		mytutor.display_jadwal();
		list_of_tutor.push(mytutor);
		list_of_tutor.savetofile("/home/wnd/Programs/rust-tutors/src/list.json");
		* 
		
		let armt: Vec<String> = env::args().collect();
		
		
		
		let mut list_of_tutor = std::vec::Vec::<Tutor>::new().new_from_file("/home/wnd/Programs/rust-tutors/src/list.json");
		for tutor in list_of_tutor.iter()
		{
			tutor.display_jadwal();
		}
		*/
	let mut buffer = String::new();

	setprompt(&mut buffer)?;

	let mut split1 : Vec<&str>  = buffer.as_str().split(":").collect();

	let mut ops = 
	match split1[0]
	{
		"pilihtabel" => Operation::OPS_PILIH_TABEL,
		"addtutor" => Operation::OPS_ADD_TUTOR,
		"deltutor" => Operation::OPS_DEL_TUTOR,
		"addjadwal" => Operation::OPS_ADD_JADWAL,
		"deljadwal" => Operation::OPS_DEL_JADWAL,
		"showjadwal" => Operation::OPS_SHOW_JADWAL,
		_ => Operation::OPS_NOOP,
	};
	
	"Abiogenesis is a fact! Get over with it!"				"But, Chemistry...." 			
				
	dave's religion											Science
	
	match ops
	{
		Operation::OPS_ADD_TUTOR => 
		{	
			let mut split2 = split1[1].split_once(",").unwrap_or_else(|| ( split1[1],""));
			let mut split3 : Vec<&str>  = split2.1.split("=").collect();
			if split3[0].eq("matkul")
			{
				let mut mytutor = match Tutor::new(split2.0, str_tomatkul_vec(split3[1]))
				{
					Ok(mytutor) => mytutor,
					Err(_) => process::exit(255),
				};
				mytutor.display_jadwal();
			}
		},
		_ => println!("Nothing to do!"),
	}
	buffer.clear();
	Ok(())
}
